<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        A//gAAP/4AAH/+AAD//gAB//4AP//+B///8=
</value>
  </data>
</root>